% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Visualization.R
\name{MultiFeatureOverlay}
\alias{MultiFeatureOverlay}
\title{Apply FeatureOverlay to multiple samples}
\usage{
MultiFeatureOverlay(object, sampleids, spots = NULL, method = "viewer",
  ncols = NULL, features, type = NULL, min.cutoff = NA,
  max.cutoff = NA, slot = "data", blend = FALSE, pt.size = 2,
  pt.alpha = 1, shape.by = NULL, palette = NULL, cols = NULL,
  rev.cols = FALSE, center.zero = FALSE, channels.use = NULL,
  verbose = FALSE, dark.theme = FALSE, ...)
}
\arguments{
\item{object}{Seurat object}

\item{sampleids}{Names of samples to plot}

\item{spots}{Character vector with spot IDs to plot [default: all spots]}

\item{method}{Display method}

\item{ncols}{Number of columns in output image}

\item{features}{\itemize{
    \item An \code{Assay} feature (e.g. a gene name - "MS4A1")
    \item A column name from meta.data (e.g. mitochondrial percentage - "percent.mito")
}}

\item{type}{Image type to plot on. Here you can specify any of the images available in your Seurat object. To get this list you can
run the \code{\link{rasterlists}} function on your Seurat object. If the type is not specified, the images will be prioritized in the following
order if they are available; "processed", "masked" and "raw".}

\item{min.cutoff}{Vector of minimum and maximum cutoff values for each feature, may specify quantile in the form of 'q##' where '##'
is the quantile (eg, 'q1', 'q10'). This can be useful if you have outlier values that skew the colorscale in the plot. For example, if you specify
'q1', you will trim of values below the 1st percentile. [default: no cuttoffs]}

\item{max.cutoff}{Vector of minimum and maximum cutoff values for each feature, may specify quantile in the form of 'q##' where '##'
is the quantile (eg, 'q1', 'q10'). This can be useful if you have outlier values that skew the colorscale in the plot. For example, if you specify
'q1', you will trim of values below the 1st percentile. [default: no cuttoffs]}

\item{slot}{Which slot to pull expression data from? [dafault: 'data']}

\item{blend}{Scale and blend expression values to visualize coexpression of two features (this options will override other coloring parameters).
See 'Blending values' below for a more thourough description.}

\item{pt.size}{Point size of each ST spot [default: 1]}

\item{pt.alpha}{Opacity of each ST spot [default: 1]}

\item{shape.by}{String specifying the column where the shaping label is stored}

\item{palette}{Color palette used for spatial heatmap (see \code{palette.select(info = T)} for available options).
Disabled if a color vector is provided (see \code{cols} below).}

\item{cols}{A vector of colors to use for colorscale, e.g. \code{cols = c("blue", "white", "red")} will
create a gradient color scale going from blue to white to red. This options will deactivate the \code{palette}
option.}

\item{rev.cols}{Logical specifying whether colorscale should be reversed [default: FALSE]}

\item{center.zero}{Specifies whther or not the colorscale should be centered around 0. For some values, such as Principal Component vectors,
the distribution of values is centered at 0 and in that case it can be appropriate to use a divergent colorscale with a predefined value for 0.
If this parameter is set to TRUE, the ggplot2 function \code{scale_color_gradient2} will be used to control the coloring instead of
\code{scale_color_gradientn}. If center.zero is set to FALSE, the colorscale will simply map the values in equally spaced intervals which could skew
the interpretaion of the output plot.}

\item{verbose}{Print messages}

\item{...}{Parameters passed to DimOverlay}
}
\description{
Apply FeatureOverlay to multiple samples
}
\examples{

# Load images
se <- LoadImages(se)

# Overlay the number of unique genes and the number of UMIs per spot on sample 1 HE image on the first two samples
MultiFeatureOverlay(se, features = c("nFeature_RNA", "nCount_RNA"), sampleids = 1:2)

# Plot selected genes on the first two samples
MultiFeatureOverlay(se, features = c("Cck", "Dcn"), sampleids = 1:2)

# Plot normalized values on the first two samples
se <- SCTransform(se)
MultiFeatureOverlay(se, features = c("Cck", "Dcn"), sampleids = 1:2)

# Change to scaled data
MultiFeatureOverlay(se, features = c("Cck", "Dcn"), sampleids = 1:2, slot = "scale.data", center.zero = TRUE)

# Mask images and plot plot the slected genes on the masked images for samples 1 and 2
se <- MaskImages(se)
MultiFeatureOverlay(se, features = c("Cck", "Dcn"), sampleids = 1:2, type = "masked")

}
\seealso{
\code{\link{ST.FeaturePlot}} and \code{\link{ST.DimPlot}} for how to plot features
without the HE image, \code{\link{DimOverlay}} for how to overlay dimensionality reduction output on the
HE images and \code{\link{MultiDimOverlay}} for how to overlay dimensionality reduction plots on the HE
images in multiple samples.
}
