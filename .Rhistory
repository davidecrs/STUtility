legend.background = element_rect(fill = ifelse(bg, "black", "white")),
legend.text = element_text(colour = ifelse(bg, "white", "black")),
plot.title = element_text(colour = ifelse(bg, "white", "black")),
legend.title = element_text(colour = ifelse(bg, "white", "black")))
return(p)
}
runApp()
?colorRampPalette
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
?fluidRow
runApp()
runApp()
runApp()
?shinyUI
?fluidRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?br
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#' Plot regulon activity (AUC) in tSNE space
#' @param tSNE tSNE matrix
#' @param variable cell feature to plot
#' @param centers data.frame with cluster centroid coordinates
#' @param palette color palette for numeric variables
#' @param title plot title
#' @param txt x axis text
#' @param show_centers logical setting wether or not clusters should be labeled
#' @param ... parameters passed to geom_point()
plotGradientTsne <- function (
tSNE,
inputVar,
centers,
palette = "GrRd",
title = "",
txt = "Scaled gene expression",
color.label = "value",
show_centers = T,
bg = F,
...
) {
d <- data.frame(tSNE, val = inputVar)
if (class(inputVar) %in% c("numeric", "integer")) {
d <- d[order(d$val, decreasing = F), ]
p <- ggplot(d, aes(tsne1, tsne2)) +
geom_point(mapping = aes(color = val), ...) +
scale_color_gradientn(colours = palette.select(palette)(9))
} else {
p <- ggplot(d, aes(tsne1, tsne2)) +
geom_point(mapping = aes(color = val), ...)
}
p <- p +
geom_text(data = centers, aes(x, y, label = res.0.7), alpha = ifelse(show_centers, 1, 0), color = ifelse(bg, "white", "black"))
p <- p +
labs(x = txt, title = title, y = "", color = color.label) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = ifelse(bg, "black", "white"), colour = ifelse(bg, "black", "white")),
plot.background = element_rect(fill = ifelse(bg, "black", "white"), colour = ifelse(bg, "black", "white")),
legend.background = element_rect(fill = ifelse(bg, "black", "white")),
legend.text = element_text(colour = ifelse(bg, "white", "black")),
plot.title = element_text(colour = ifelse(bg, "white", "black")),
legend.title = element_text(colour = ifelse(bg, "white", "black")),
legend.key.size = unit(2, "cm"))
return(p)
}
runApp()
runApp()
runApp()
#function to extract the legend
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
l <- g.legend(p)
l <- g_legend(p)
l
gird.draw(l))
gird.draw(l)
grid.draw(l)
grid::grid.draw(l)
p <- grid::grid.draw(l)
plot(p)
p <- grid::grid.draw(l)
p
l
grid::grid.draw(l)
grid::grid.draw(l)
dev.off()
dev.off()
dev.off()
dev.off()
l
grid::grid.draw(l)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p <- grid::grid.draw(l)
plot(p)
grid::grid.draw(l)
?grid.draw
runApp()
runApp()
p <- as.ggplot(grid::grid.draw(l))
library(ggplot2)
p <- as.ggplot(grid::grid.draw(l))
library(ggpotify)
install.packages("ggplotliy")
install.packages("ggplotify")
library(ggplotify)
p <- as.ggplot(grid::grid.draw(l))
p <- as.ggplot(l)
p
dev.off()
p
runApp()
runApp()
runApp()
grid.draw(l)
grid::grid.draw(l)
grid::grid.draw(l)
l
l$widths
l$layout
library(grid)
widthDetails(l)
l
?editGrob
ggplot() + annotation_custom(l, xmin = -Inf, xmax = Inf, ymin = -Inf,
ymax = Inf)
l$layout
plot(l)
plot(l)
l$layout
class(l$layout)
class(l$layout)[, 1] <- c(0,0)
class(l$layout)[, 1]
l$layout[, 1]
l$layout[, 1] <- c(0, 0)
plot(l)
l$layout[, 1] <- c(1, 1)
plot(l)
l$layout[, 1] <- c(1, 10)
plot(l)
l$layout[, 1] <- c(1, 4)
plot(l)
l$layout[, 1] <- c(1, 10)
plot(l)
l$layout[, 1] <- c(1, 8)
plot(l)
l$layout[, 1] <- c(1, 3)
plot(l)
l$layout[, 1] <- c(4, 1)
plot(l)
l$layout[, 1] <- c(10, 1)
plot(l)
l$layout[, 1] <- c(7, 1)
plot(l)
l$layout[, 1] <- c(6, 1)
plot(l)
l$layout[, 1] <- c(5, 1)
plot(l)
l$layout[, 1] <- c(4, 1)
plot(l)
l$layout[, 2] <- c(4, 1)
plot(l)
l$layout[, 3] <- c(4, 1)
plot(l)
l$layout[, 4] <- c(4, 1)
plot(l)
l$layout[, 4] <- c(7, 1)
plot(l)
l$layout[, 4] <- c(5, 5)
plot(l)
grid.get(l)
p
p
plot(p)
dev.off()
l <- p
plot(l)
?grid.edit
legend <- cowplot::get_legend(p)
p <- plotGradientTsne(tSNE = meta_SC$tsne,
title = "",
inputVar = meta_SC$meta.data[, "res.0.7", drop = T],
centers = meta_SC$centers,
palette = "GrRd",
show_centers = F,
bg = F,
size = 1)
p
legend <- cowplot::get_legend(p)
legend
plot(legend)
library(ggplot2)
library(cowplot)
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line()
plot.mpg <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl))) + geom_point(size=2.5)
# Note that these cannot be aligned vertically due to the legend in the plot.mpg
ggdraw(plot_grid(p1, plot.mpg, ncol=1, align='v'))
# now extract the legend
legend <- get_legend(plot.mpg)
# and replot suppressing the legend
plot.mpg <- plot.mpg + theme(legend.position='none')
# Now plots are aligned vertically with the legend to the right
ggdraw(plot_grid(plot_grid(p1, plot.mpg, ncol=1, align='v'),
plot_grid(NULL, legend, ncol=1),
rel_widths=c(1, 0.2)))
plot_grid(NULL, legend, ncol=1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#' Plot regulon activity (AUC) in tSNE space
#' @param tSNE tSNE matrix
#' @param variable cell feature to plot
#' @param centers data.frame with cluster centroid coordinates
#' @param palette color palette for numeric variables
#' @param title plot title
#' @param txt x axis text
#' @param show_centers logical setting wether or not clusters should be labeled
#' @param ... parameters passed to geom_point()
plotGradientTsne <- function (
tSNE,
inputVar,
centers,
palette = "GrRd",
title = "Scaled gene expression",
color.label = "value",
show_centers = T,
bg = F,
lgd.txt.size,
...
) {
d <- data.frame(tSNE, val = inputVar)
if (class(inputVar) %in% c("numeric", "integer")) {
d <- d[order(d$val, decreasing = F), ]
p <- ggplot(d, aes(tsne1, tsne2)) +
geom_point(mapping = aes(color = val), ...) +
scale_color_gradientn(colours = palette.select(palette)(9))
} else {
p <- ggplot(d, aes(tsne1, tsne2)) +
geom_point(mapping = aes(color = val), ...)
}
p <- p +
geom_text(data = centers, aes(x, y, label = res.0.7), alpha = ifelse(show_centers, 1, 0), color = ifelse(bg, "white", "black"))
p <- p +
labs(title = title, y = "", color = color.label) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = ifelse(bg, "black", "white"), colour = ifelse(bg, "black", "white")),
plot.background = element_rect(fill = ifelse(bg, "black", "white"), colour = ifelse(bg, "black", "white")),
legend.background = element_rect(fill = ifelse(bg, "black", "white")),
legend.text = element_text(colour = ifelse(bg, "white", "black"), size = lgd.txt.size),
plot.title = element_text(colour = ifelse(bg, "white", "black")),
legend.title = element_text(colour = ifelse(bg, "white", "black"), size = lgd.txt.size*2))
return(p)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
?mainPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grid.dra(l)
grid.draw(l)
plot(l)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinycssloaders)
install.packages("library(shinycssloaders)")
install.packages("shinycssloaders")
library(shinycssloaders)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load(file = "data/meta_SC")
load(file = "data/meta_ST")
load(file = "data/exprMat_SC")
load(file = "data/exprMat_ST")
head(meta_SC$meta.data)
load(file = "data/DE_markers_SC")
load(file = "data/DE_markers_ST")
head(DE_markers_SC)
DE_markers_SC$cluster <- gsub(pattern = "C", replacement = "Cl_", x = DE_markers_SC$cluster)
head(DE_markers_SC)
DE_markers_ST$cluster <- gsub(pattern = "C", replacement = "Cl_", x = DE_markers_ST$cluster)
save(DE_markers_SC, file = "data/DE_markers_SC")
save(DE_markers_ST, file = "data/DE_markers_ST")
runApp()
runApp()
runApp()
runApp()
runApp()
?withSpinner
runApp()
runApp()
runApp()
d <- as(exprMat_SC, "dgCMatrix")
object.size(d)
object.size(d, units = "Mb")
object.size(d, units = "mb")
object.size(d, units = "MB")
print(object.size(d), units = "Mb")
print(object.size(d), units = "Gb")
dim(exprMat_SC)
exprMat_SC <- exprMat_SC[unique(DE_markers_SC$gene), ]
save(exprMat_SC, file = "data/exprMat_SC")
dim(exprMat_SC)
exprMat_ST <- exprMat_ST[unique(DE_markers_ST$gene), ]
save(exprMat_ST, file = "data/exprMat_ST")
rm(d)
runApp()
?get_legend
head(DE_markers_SC)
head(DE_markers_SC, 100)
sum(DE_markers_SC$p.adj<0.01)
dim(DE_markers_SC)
sum(DE_markers_SC$p.adj>0.01)
# prep
DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
save(DE_markers_SC, file = "data/DE_markers_SC")
DE_markers_ST <- subset(DE_markers_ST, p.adj < 0.01)
DE_markers_ST <- DE_markers_ST[order(DE_markers_ST$logFC, decreasing = T), ]
save(DE_markers_ST, file = "data/DE_markers_ST")
dim(DE_markers_ST)
dim(DE_markers_SC)
runApp()
haed(DE_markers_SC)
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
#DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC)
save(DE_markers_SC, file = "data/DE_markers_SC")
#DE_markers_ST <- subset(DE_markers_ST, p.adj < 0.01)
#DE_markers_ST <- DE_markers_ST[order(DE_markers_ST$logFC, decreasing = T), ]
DE_markers_ST <- DE_markers_ST %>% group_by(cluster) %>% arrange(-logFC)
save(DE_markers_ST, file = "data/DE_markers_ST")
runApp()
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
#DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC)
head(DE_markers_SC)
DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC) %>% top_n(n = 5)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
#DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC, cluster)
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
#DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
#DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC)
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(-logFC)
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
#DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$logFC, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(desc(logFC))
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$cluster, decreasing = T), ]
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(desc(logFC))
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$cluster, decreasing = T), ]
head(DE_markers_SC)
# prep
#DE_markers_SC <- subset(DE_markers_SC, p.adj < 0.01)
DE_markers_SC <- DE_markers_SC[order(DE_markers_SC$cluster, decreasing = F), ]
head(DE_markers_SC)
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(desc(logFC))
head(DE_markers_SC)
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(logFC)
head(DE_markers_SC)
DE_markers_SC <- DE_markers_SC %>% group_by(cluster) %>% arrange(logFC) %>% ungroup()
head(DE_markers_SC)
DE_markers_SC <- DE_markers_SC %>% arrange(logFC) %>% group_by(cluster)
head(DE_markers_SC)
DE_markers_SC <- DE_markers_SC %>% arrange(logFC) %>% arrange(cluster)
head(DE_markers_SC)
DE_markers_SC <- DE_markers_SC %>% arrange(desc(logFC)) %>% arrange(cluster)
head(DE_markers_SC)
save(DE_markers_SC, file = "data/DE_markers_SC")
#DE_markers_ST <- subset(DE_markers_ST, p.adj < 0.01)
#DE_markers_ST <- DE_markers_ST[order(DE_markers_ST$logFC, decreasing = T), ]
DE_markers_ST <- DE_markers_ST %>% arrange(desc(logFC)) %>% arrange(cluster)
save(DE_markers_ST, file = "data/DE_markers_ST")
save(DE_markers_SC, file = "data/DE_markers_SC")
head(DE_markers_ST)
runApp()
sessionInfo()
library(STutility)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
