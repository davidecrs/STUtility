ST.DimPlot <- function(
object,
dims = c(1, 2),
spots = NULL,
pt.size = 1,
reduction = NULL,
group.by = NULL,
shape.by = NULL,
palette = "MaYl",
rev.cols = F,
dark.theme = F,
combine = TRUE,
ncol = NULL,
delim = NULL,
return.plot.list = F,
...
) {
reduction <- reduction %||% {
default.reductions <- c('umap', 'tsne', 'pca')
object.reductions <- FilterObjects(object = object, classes.keep = 'DimReduc')
reduc.use <- min(which(x = default.reductions %in% object.reductions))
default.reductions[reduc.use]
}
spots <- spots %||% colnames(x = object)
data <- Embeddings(object = object[[reduction]])[spots, dims, drop = FALSE]
data <- as.data.frame(x = data)
dims <- paste0(Key(object = object[[reduction]]), dims)
if (!is.null(x = group.by)) {
data[,  group.by] <- object[[group.by, drop = TRUE]]
} else if ("sample" %in% colnames(object[[]])) {
if (length(unique(object[["sample"]]))) {
warning("sample column found in meta data but not specified as the group.by variable ...")
warning("setting sample as group.by variable ...")
group.by <- "sample"
data[, group.by] <- object[[group.by, drop = TRUE]]
}
}
if (!is.null(x = shape.by)) {
data[, shape.by] <- object[[shape.by, drop = TRUE]]
}
# Obtain array coordinates
if (all(c("adj_x", "adj_y") %in% colnames(object[[]]))) {
data <- cbind(data, setNames(object[[c("adj_x", "adj_y")]], nm = c("x", "y")))
} else {
if(is.null(delim)) {
stop("adjusted coordinates are not present in meta data and delimiter is missing ...")
}
coords <- GetCoords(colnames(object), delim)
data <- cbind(data, coords[, c("x", "y")])
}
# Create plots
plots <- lapply(X = dims, FUN = function(d) {
plot <- STPlot(data,
group.by,
d,
pt.size,
palette,
rev.cols,
ncol,
...)
if (dark.theme) {
plot <- plot + dark_theme()
}
return(plot)
})
if (return.plot.list) {
return(Plots)
} else {
for (p in plots) {
plot(p)
}
}
}
ST.DimPlot(object = cm, dims = 1:2, delim = "x|_")
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_")
ST.DimPlot <- function(
object,
dims = c(1, 2),
spots = NULL,
pt.size = 1,
reduction = NULL,
group.by = NULL,
shape.by = NULL,
palette = "MaYl",
rev.cols = F,
dark.theme = F,
combine = TRUE,
ncol = NULL,
delim = NULL,
return.plot.list = F,
...
) {
reduction <- reduction %||% {
default.reductions <- c('umap', 'tsne', 'pca')
object.reductions <- FilterObjects(object = object, classes.keep = 'DimReduc')
reduc.use <- min(which(x = default.reductions %in% object.reductions))
default.reductions[reduc.use]
}
spots <- spots %||% colnames(x = object)
data <- Embeddings(object = object[[reduction]])[spots, dims, drop = FALSE]
data <- as.data.frame(x = data)
dims <- paste0(Key(object = object[[reduction]]), dims)
if (!is.null(x = group.by)) {
data[,  group.by] <- object[[group.by, drop = TRUE]]
} else if ("sample" %in% colnames(object[[]])) {
if (length(unique(object[["sample"]]))) {
warning("sample column found in meta data but not specified as the group.by variable ...\nsetting sample as group.by variable ...")
group.by <- "sample"
data[, group.by] <- object[[group.by, drop = TRUE]]
}
}
if (!is.null(x = shape.by)) {
data[, shape.by] <- object[[shape.by, drop = TRUE]]
}
# Obtain array coordinates
if (all(c("adj_x", "adj_y") %in% colnames(object[[]]))) {
data <- cbind(data, setNames(object[[c("adj_x", "adj_y")]], nm = c("x", "y")))
} else {
if(is.null(delim)) {
stop("adjusted coordinates are not present in meta data and delimiter is missing ...")
}
coords <- GetCoords(colnames(object), delim)
data <- cbind(data, coords[, c("x", "y")])
}
# Create plots
plots <- lapply(X = dims, FUN = function(d) {
plot <- STPlot(data,
group.by,
d,
pt.size,
palette,
rev.cols,
ncol,
...)
if (dark.theme) {
plot <- plot + dark_theme()
}
return(plot)
})
if (return.plot.list) {
return(Plots)
} else {
for (p in plots) {
plot(p)
}
}
}
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_")
ST.DimPlot(object = cm, dims = 1:2, delim = "x|_")
ST.DimPlot <- function(
object,
dims = c(1, 2),
spots = NULL,
pt.size = 1,
reduction = NULL,
group.by = NULL,
shape.by = NULL,
palette = "MaYl",
rev.cols = F,
dark.theme = F,
combine = TRUE,
ncol = NULL,
delim = NULL,
return.plot.list = F,
...
) {
reduction <- reduction %||% {
default.reductions <- c('umap', 'tsne', 'pca')
object.reductions <- FilterObjects(object = object, classes.keep = 'DimReduc')
reduc.use <- min(which(x = default.reductions %in% object.reductions))
default.reductions[reduc.use]
}
spots <- spots %||% colnames(x = object)
data <- Embeddings(object = object[[reduction]])[spots, dims, drop = FALSE]
data <- as.data.frame(x = data)
dims <- paste0(Key(object = object[[reduction]]), dims)
if (!is.null(x = group.by)) {
data[,  group.by] <- object[[group.by, drop = TRUE]]
} else if ("sample" %in% colnames(object[[]])) {
if (length(unique(object[["sample"]]))) {
warning("sample column found in meta data but not specified as the group.by variable ...\n\tsetting sample as group.by variable ...")
group.by <- "sample"
data[, group.by] <- object[[group.by, drop = TRUE]]
}
}
if (!is.null(x = shape.by)) {
data[, shape.by] <- object[[shape.by, drop = TRUE]]
}
# Obtain array coordinates
if (all(c("adj_x", "adj_y") %in% colnames(object[[]]))) {
data <- cbind(data, setNames(object[[c("adj_x", "adj_y")]], nm = c("x", "y")))
} else {
if(is.null(delim)) {
stop("adjusted coordinates are not present in meta data and delimiter is missing ...")
}
coords <- GetCoords(colnames(object), delim)
data <- cbind(data, coords[, c("x", "y")])
}
# Create plots
plots <- lapply(X = dims, FUN = function(d) {
plot <- STPlot(data,
group.by,
d,
pt.size,
palette,
rev.cols,
ncol,
...)
if (dark.theme) {
plot <- plot + dark_theme()
}
return(plot)
})
if (return.plot.list) {
return(Plots)
} else {
for (p in plots) {
plot(p)
}
}
}
ST.DimPlot(object = cm, dims = 1:2, delim = "x|_")
ST.DimPlot <- function(
object,
dims = c(1, 2),
spots = NULL,
pt.size = 1,
reduction = NULL,
group.by = NULL,
shape.by = NULL,
palette = "MaYl",
rev.cols = F,
dark.theme = F,
combine = TRUE,
ncol = NULL,
delim = NULL,
return.plot.list = F,
...
) {
reduction <- reduction %||% {
default.reductions <- c('umap', 'tsne', 'pca')
object.reductions <- FilterObjects(object = object, classes.keep = 'DimReduc')
reduc.use <- min(which(x = default.reductions %in% object.reductions))
default.reductions[reduc.use]
}
spots <- spots %||% colnames(x = object)
data <- Embeddings(object = object[[reduction]])[spots, dims, drop = FALSE]
data <- as.data.frame(x = data)
dims <- paste0(Key(object = object[[reduction]]), dims)
if (!is.null(x = group.by)) {
data[,  group.by] <- object[[group.by, drop = TRUE]]
} else if ("sample" %in% colnames(object[[]])) {
if (length(unique(object[["sample"]]))) {
warning("sample column found in meta data but not specified as the group.by variable ...\n  setting sample as group.by variable ...")
group.by <- "sample"
data[, group.by] <- object[[group.by, drop = TRUE]]
}
}
if (!is.null(x = shape.by)) {
data[, shape.by] <- object[[shape.by, drop = TRUE]]
}
# Obtain array coordinates
if (all(c("adj_x", "adj_y") %in% colnames(object[[]]))) {
data <- cbind(data, setNames(object[[c("adj_x", "adj_y")]], nm = c("x", "y")))
} else {
if(is.null(delim)) {
stop("adjusted coordinates are not present in meta data and delimiter is missing ...")
}
coords <- GetCoords(colnames(object), delim)
data <- cbind(data, coords[, c("x", "y")])
}
# Create plots
plots <- lapply(X = dims, FUN = function(d) {
plot <- STPlot(data,
group.by,
d,
pt.size,
palette,
rev.cols,
ncol,
...)
if (dark.theme) {
plot <- plot + dark_theme()
}
return(plot)
})
if (return.plot.list) {
return(Plots)
} else {
for (p in plots) {
plot(p)
}
}
}
ST.DimPlot(object = cm, dims = 1:2, delim = "x|_")
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_")
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_", dark.theme = T)
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_", dark.theme = T, palette = "magma")
ST.DimPlot <- function(
object,
dims = c(1, 2),
spots = NULL,
pt.size = 1,
reduction = NULL,
group.by = NULL,
shape.by = NULL,
palette = "MaYl",
rev.cols = F,
dark.theme = F,
combine = TRUE,
ncol = NULL,
delim = NULL,
return.plot.list = F,
...
) {
reduction <- reduction %||% {
default.reductions <- c('umap', 'tsne', 'pca')
object.reductions <- FilterObjects(object = object, classes.keep = 'DimReduc')
reduc.use <- min(which(x = default.reductions %in% object.reductions))
default.reductions[reduc.use]
}
spots <- spots %||% colnames(x = object)
data <- Embeddings(object = object[[reduction]])[spots, dims, drop = FALSE]
data <- as.data.frame(x = data)
dims <- paste0(Key(object = object[[reduction]]), dims)
if (!is.null(x = group.by)) {
data[,  group.by] <- object[[group.by, drop = TRUE]]
} else if ("sample" %in% colnames(object[[]])) {
if (length(unique(object[["sample"]]))) {
warning("sample column found in meta data but not specified as the group.by variable ...\n  setting sample as group.by variable ...")
group.by <- "sample"
data[, group.by] <- object[[group.by, drop = TRUE]]
}
}
if (!is.null(x = shape.by)) {
data[, shape.by] <- object[[shape.by, drop = TRUE]]
}
# Obtain array coordinates
if (all(c("adj_x", "adj_y") %in% colnames(object[[]]))) {
data <- cbind(data, setNames(object[[c("adj_x", "adj_y")]], nm = c("x", "y")))
} else {
if(is.null(delim)) {
stop("adjusted coordinates are not present in meta data and delimiter is missing ...")
}
coords <- GetCoords(colnames(object), delim)
data <- cbind(data, coords[, c("x", "y")])
}
# Create plots
plots <- lapply(X = dims, FUN = function(d) {
plot <- STPlot(data,
group.by,
d,
pt.size,
palette,
rev.cols,
ncol,
...)
if (dark.theme) {
plot <- plot + dark_theme()
}
return(plot)
})
if (return.plot.list) {
return(plots)
} else {
cowplot::plot_grid(plotlist = plots)
}
}
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_", dark.theme = T, palette = "magma")
STPlot <- function(
data,
group.by,
variable,
pt.size = 1,
palette = "MaYl",
rev.cols = F,
ncol = NULL,
...
) {
cols <- palette.select(palette)(50)
if (rev.cols) {
cols <- rev(cols)
}
ggplot() +
geom_point(data = data, mapping = aes_string(x = "x", y = "64 - y", color = variable), size = pt.size, ...) +
scale_x_continuous(limits = c(0, 67)) +
scale_y_continuous(limits = c(0, 64)) +
theme_void() +
facet_wrap(as.formula(paste("~", group.by)), ncol = ncol) +
labs(title = variable) +
scale_color_gradientn(colours = cols)
}
ST.DimPlot <- function(
object,
dims = c(1, 2),
spots = NULL,
pt.size = 1,
reduction = NULL,
group.by = NULL,
shape.by = NULL,
palette = "MaYl",
rev.cols = F,
dark.theme = F,
combine = TRUE,
ncol = NULL,
delim = NULL,
return.plot.list = F,
...
) {
reduction <- reduction %||% {
default.reductions <- c('umap', 'tsne', 'pca')
object.reductions <- FilterObjects(object = object, classes.keep = 'DimReduc')
reduc.use <- min(which(x = default.reductions %in% object.reductions))
default.reductions[reduc.use]
}
spots <- spots %||% colnames(x = object)
data <- Embeddings(object = object[[reduction]])[spots, dims, drop = FALSE]
data <- as.data.frame(x = data)
dims <- paste0(Key(object = object[[reduction]]), dims)
if (!is.null(x = group.by)) {
data[,  group.by] <- object[[group.by, drop = TRUE]]
} else if ("sample" %in% colnames(object[[]])) {
if (length(unique(object[["sample"]]))) {
warning("sample column found in meta data but not specified as the group.by variable ...\n  setting sample as group.by variable ...")
group.by <- "sample"
data[, group.by] <- object[[group.by, drop = TRUE]]
}
}
if (!is.null(x = shape.by)) {
data[, shape.by] <- object[[shape.by, drop = TRUE]]
}
# Obtain array coordinates
if (all(c("adj_x", "adj_y") %in% colnames(object[[]]))) {
data <- cbind(data, setNames(object[[c("adj_x", "adj_y")]], nm = c("x", "y")))
} else {
if(is.null(delim)) {
stop("adjusted coordinates are not present in meta data and delimiter is missing ...")
}
coords <- GetCoords(colnames(object), delim)
data <- cbind(data, coords[, c("x", "y")])
}
# Create plots
plots <- lapply(X = dims, FUN = function(d) {
plot <- STPlot(data,
group.by,
d,
pt.size,
palette,
rev.cols,
ncol,
...)
if (dark.theme) {
plot <- plot + dark_theme()
}
return(plot)
})
if (return.plot.list) {
return(plots)
} else {
cowplot::plot_grid(plotlist = plots)
}
}
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_", dark.theme = T, palette = "magma")
STPlot <- function(
data,
group.by,
variable,
pt.size = 1,
palette = "MaYl",
rev.cols = F,
ncol = NULL,
...
) {
cols <- palette.select(palette)(50)
if (rev.cols) {
cols <- rev(cols)
}
ggplot() +
geom_point(data = data, mapping = aes_string(x = "x", y = "64 - y", color = variable), size = pt.size, ...) +
scale_x_continuous(limits = c(0, 67)) +
scale_y_continuous(limits = c(0, 64)) +
theme_void() +
facet_wrap(as.formula(paste("~", group.by)), ncol = ncol) +
labs(title = "value") +
scale_color_gradientn(colours = cols)
}
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_", dark.theme = T, palette = "magma")
STPlot <- function(
data,
group.by,
variable,
pt.size = 1,
palette = "MaYl",
rev.cols = F,
ncol = NULL,
...
) {
cols <- palette.select(palette)(50)
if (rev.cols) {
cols <- rev(cols)
}
ggplot() +
geom_point(data = data, mapping = aes_string(x = "x", y = "64 - y", color = variable), size = pt.size, ...) +
scale_x_continuous(limits = c(0, 67)) +
scale_y_continuous(limits = c(0, 64)) +
theme_void() +
facet_wrap(as.formula(paste("~", group.by)), ncol = ncol) +
labs(title = variable, color = "") +
scale_color_gradientn(colours = cols)
}
ST.DimPlot(object = cm, dims = 1:2, group.by = "sample", delim = "x|_", dark.theme = T, palette = "magma")
ST.DimPlot(object = cm, dims = 1:4, group.by = "sample", delim = "x|_", dark.theme = T, palette = "magma")
