library(Seurat)
isntall.packages("reshape2")
install.packages("reshape2")
library(Seurat)
Seurat::cc.genes
library(data.table)
time <- Sys.time()
x <- st.load.matrix(path = "~/sRIN/171031_data/ST-seq_of_PNET/Sequencing_data/OUTPUT_p151117_C1_LK/adjusted_p151117_C1_LK_stdata.tsv")
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = "~/sRIN/171031_data/ST-seq_of_PNET/Sequencing_data/OUTPUT_p151117_C1_LK/adjusted_p151117_C1_LK_stdata.tsv")
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix(path = "/Volumes/Ludvig_backup/HER2_project/data/BT10426/D1/C1_1000L5_FS_LL_20190114_v1.6.0_disable_mm_stdata.tsv")
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = "/Volumes/Ludvig_backup/HER2_project/data/BT10426/D1/C1_1000L5_FS_LL_20190114_v1.6.0_disable_mm_stdata.tsv")
Sys.time() - time
library(data.table)
#' load count files
#'
#' @param path Path to count files
#' @param suffix add suffix to path
#' @param row.names set column as row.names
#' @keywords internal
st.load.matrix = function(path, suffix="", row.names=1, ...) {
x = c()
tmp = try({ x = read.delim(paste(path, suffix, sep=""),
header=T,
row.names=row.names,
sep=",",
check.names=F,
...)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
st.load.matrix.2 = function(path, suffix="", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path,
sep = "\t",
header = T,
check.names = F),
row.names = row.names)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
time <- Sys.time()
x <- st.load.matrix(path = "/Volumes/Ludvig_backup/HER2_project/data/BT10426/D1/C1_1000L5_FS_LL_20190114_v1.6.0_disable_mm_stdata.tsv")
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = "/Volumes/Ludvig_backup/HER2_project/data/BT10426/D1/C1_1000L5_FS_LL_20190114_v1.6.0_disable_mm_stdata.tsv")
Sys.time() - time
abs.path<-system.file("extdata", package = "STutility")
abs.path
system.file("extdata", package = "STutility")
library(devtools)
devtools::document()
devtools::document()
library(STutility)
system.file("extdata", package = "STutility")
test.file <- list.files(path = system.file("extdata", package = "STutility"), recursive = ".csv", full.names = T)
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)
test.file
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file)
Sys.time() - time
library(data.table)
#' load count files
#'
#' @param path Path to count files
#' @param suffix add suffix to path
#' @param row.names set column as row.names
#' @keywords internal
st.load.matrix = function(path, suffix="", row.names=1, ...) {
x = c()
tmp = try({ x = read.delim(paste(path, suffix, sep=""),
header=T,
row.names=row.names,
sep=",",
check.names=F,
...)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = T,
check.names = F),
row.names = row.names)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
dim(x)
x[1:5, 1:5]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
x[1:5, 1:5]
x[1:5, 1:5]
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
x[1:5, 1:5]
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE),
row.names = row.names)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
x[1:5, 1:5]
path = test.file
delim = "\t"
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path, quote = F,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path, quote = "",
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path, quote = '"',
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
delim = ","
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
row.names = 1
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
df <- v
df <- fread(input = path,
sep = delim,
header = TRUE,
check.names = F)
df[1:5, 1:5]
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = FALSE,
check.names = F),
row.names = row.names)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = FALSE,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path, sep2 = ","
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path, sep2 = ",",
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path, quote = "",
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path, integer64 = T,
sep = delim,
header = TRUE,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = TRUE,
check.names = T),
row.names = row.names)})
tmp[1:5, 1:5]
?fread
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = 1,
check.names = F),
row.names = row.names)})
tmp = try({ x = data.frame(fread(input = path,
sep = delim,
header = F,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path, integer64 = "character",
sep = delim,
header = F,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path, integer64 = "character",
sep = delim,
#header = F,
check.names = F),
row.names = row.names)})
tmp[1:5, 1:5]
tmp = try({ x = data.frame(fread(input = path, integer64 = "character",
sep = delim,
#header = F,
check.names = T),
row.names = row.names)})
tmp[1:5, 1:5]
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path, integer64 = "character",
sep = delim,
check.names = FALSE),
row.names = row.names)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path, integer64 = "character",
sep = delim,
check.names = FALSE),
row.names = row.names)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
x <- st.load.matrix(path = test.file)
tmp[1:5, 1:5]
x <- st.load.matrix.2(path = test.file, delim = ",")
tmp[1:5, 1:5]
x[1:5, 1:5]
x <- st.load.matrix(path = test.file)
x[1:5, 1:5]
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = try({ x = data.frame(fread(input = path, integer64 = "character",
sep = delim),
row.names = row.names,
check.names = FALSE)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
x[1:5, 1.5]
x[1:5, 1:5]
x[1:5, 1:5]
x[1:5, 1:5]
x[1:5, 1:5]
x[1:5, 1:5]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = suppressWarnings({try({x = data.frame(fread(input = path, integer64 = "character",
sep = delim),
row.names = row.names,
check.names = FALSE)})})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
test.file <- list.files(path = system.file("extdata", package = "STutility"), pattern = ".csv", recursive = TRUE, full.names = T)[1]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
x[1:5, 1:5]
time <- Sys.time()
x <- st.load.matrix(path = test.file)
Sys.time() - time
time <- Sys.time()
x <- st.load.matrix.2(path = test.file, delim = ",")
Sys.time() - time
merge_exp_list <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
stopifnot(length(labels) == length(ls) & class(labels) == "character")
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
#rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
#colnames(exprMat) <- cols
return(merged_exprMat)
}
test.files
test.file
system.file("extdata", package = "STutility")
list.files(path = system.file("extdata", package = "STutility"), full.names = T, recursive = T, pattern = ".csv")
csv.files <- list.files(path = system.file("extdata", package = "STutility"), full.names = T, recursive = T, pattern = ".csv")[1:4]
exp.list <- lapply(csv.files, st.load.matrix.2)
exp.list <- lapply(csv.files, st.load.matrix.2, delim = ",")
lapply(exp.list, dim)
merger <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
stopifnot(length(labels) == length(ls) & class(labels) == "character")
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
#rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
#colnames(exprMat) <- cols
return(merged_exprMat)
}
expr.merger <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
stopifnot(length(labels) == length(ls) & class(labels) == "character")
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
#rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
#colnames(exprMat) <- cols
return(merged_exprMat)
}
merged_exprMat <- expr.merger(exp.list, delim = "x")
expr.merger <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
#rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
#colnames(exprMat) <- cols
return(merged_exprMat)
}
merged_exprMat <- expr.merger(exp.list, delim = "x")
dim(merged_exprMat)
merged_exprMat
expr.merger <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
#colnames(exprMat) <- cols
return(merged_exprMat)
}
csv.files <- list.files(path = system.file("extdata", package = "STutility"), full.names = T, recursive = T, pattern = ".csv")[1:4]
exp.list <- lapply(csv.files, st.load.matrix.2, delim = ",")
merged_exprMat <- expr.merger(exp.list, delim = "x")
merged_exprMat
merged_exprMat[1:5, 1:5]
expr.merger <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
return(merged_exprMat)
}
