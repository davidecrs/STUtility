library(STutility)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
abs.path <- system.file("extdata", package = "STutility")
infoTable <- read.table(paste(abs.path, "metaData.csv", sep="/"), sep=";", header=T)
head(infoTable)
fix <-list.files(system.file("extdata/counts", package = "STutility"), full.names = T)
fixCounts <- fix[grep(fix, pattern = "[^_]MOB[1-9].tsv")]
fixSpotfiles <- fix[grep(fix, pattern = "alignment")]
fixImgs <- fix[grep(fix, pattern = ".jpg")]
infoTable[,1] <- fixCounts
infoTable[,5] <- fixSpotfiles
infoTable[,6] <- fixImgs
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
devtools::document()
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
library(STutility)
library(STutility)
fix <-list.files(system.file("extdata/counts", package = "STutility"), full.names = T)
fixCounts <- fix[grep(fix, pattern = "[^_]MOB[1-9].tsv")]
fixSpotfiles <- fix[grep(fix, pattern = "alignment")]
fixImgs <- fix[grep(fix, pattern = ".jpg")]
infoTable[,1] <- fixCounts
infoTable[,5] <- fixSpotfiles
infoTable[,6] <- fixImgs
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
devtools::document()
library(STutility)
library(STutility)
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
infoTable
st.load.matrix = function(path, suffix="", row.names=1, ...) {
x = c()
tmp = try({ x = read.delim(paste(path, suffix, sep=""),
header=T,
row.names=row.names,
sep=",",
check.names=F,
...)})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STutility)
abs.path <- system.file("extdata", package = "STutility")
infoTable <- read.table(paste(abs.path, "metaData.csv", sep="/"), sep=";", header=T)
head(infoTable)
fix <-list.files(system.file("extdata/counts", package = "STutility"), full.names = T)
fixCounts <- fix[grep(fix, pattern = "[^_]MOB[1-9].tsv")]
fixSpotfiles <- fix[grep(fix, pattern = "alignment")]
fixImgs <- fix[grep(fix, pattern = ".jpg")]
infoTable[,1] <- fixCounts
infoTable[,5] <- fixSpotfiles
infoTable[,6] <- fixImgs
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
devtools::document()
library(STutility)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STutility)
abs.path <- system.file("extdata", package = "STutility")
infoTable <- read.table(paste(abs.path, "metaData.csv", sep="/"), sep=";", header=T)
head(infoTable)
fix <-list.files(system.file("extdata/counts", package = "STutility"), full.names = T)
fixCounts <- fix[grep(fix, pattern = "[^_]MOB[1-9].tsv")]
fixSpotfiles <- fix[grep(fix, pattern = "alignment")]
fixImgs <- fix[grep(fix, pattern = ".jpg")]
infoTable[,1] <- fixCounts
infoTable[,5] <- fixSpotfiles
infoTable[,6] <- fixImgs
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
?Seurat
library(Seurat)
?Seurat
sessionInfo()
version
library(Seurat)
sessionInfo()
library(STutility)
infoTable <- read.table(paste(abs.path, "metaData.csv", sep="/"), sep=";", header=T)
devtools::document()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(STutility)
install.packages("alphahull")
install.packages("alphahull")
library(STutility)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STutility)
abs.path <- system.file("extdata", package = "STutility")
infoTable <- read.table(paste(abs.path, "metaData.csv", sep="/"), sep=";", header=T)
head(infoTable)
fix <-list.files(system.file("extdata/counts", package = "STutility"), full.names = T)
fixCounts <- fix[grep(fix, pattern = "[^_]MOB[1-9].tsv")]
fixSpotfiles <- fix[grep(fix, pattern = "alignment")]
fixImgs <- fix[grep(fix, pattern = ".jpg")]
infoTable[,1] <- fixCounts
infoTable[,5] <- fixSpotfiles
infoTable[,6] <- fixImgs
cm <- prep.from.table(sampleTable=infoTable,
transpose=T,
topN=0, th.gene=0, th.spot=0,
type="Seurat")
cm
cm[[]]
class(cm)
rownames(cm)
qcGenes <- function(
exprMat,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
coords <- GetCoords(rownames(object[[]]), delim)
} else {
coords <- GetCoords(colnames(object), delim)
}
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
return(qc.table)
}
qc <- qcGenes(cm)
qcGenes <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
coords <- GetCoords(rownames(object[[]]), delim)
} else {
coords <- GetCoords(colnames(object), delim)
}
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
return(qc.table)
}
qc <- qcGenes(cm)
GetCoords <- function(spotnames, delim = "x") {
stopifnot(class(spotnames) == "character")
if (sum(duplicated(spotnames)) > 0) {
stop("Duplicate names are not allowed ...")
}
coords <- do.call(rbind, strsplit(spotnames, split = delim))
if (ncol(coords) == 3) {
coords <- setNames(data.frame(coords, stringsAsFactors = F), nm = c("sampleID", "x", "y"))
} else if (ncol(coords) == 2) {
coords <- setNames(data.frame(coords, stringsAsFactors = F), nm = c("x", "y"))
} else {
stop("Invalid spotnames ...")
}
coords$x <- as.numeric(coords$x)
coords$y <- as.numeric(coords$y)
rownames(coords) <- spotnames
return(coords)
}
qc <- qcGenes(cm)
d <- GetAssayData(object = rna, slot = 'scale.data')
d <- GetAssayData(object = cm, slot = 'scale.data')
dim(d)
d
d <- GetAssayData(object = cm, slot = 'raw.data')
d <- GetAssayData(object = cm, slot = 'raw')
d <- GetAssayData(object = cm, slot = 'counts')
dim(d)
rownames(cm)
qcGenes <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
coords <- GetCoords(rownames(object[[]]), delim)
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
} else {
coords <- GetCoords(colnames(object), delim)
exprMat <- object
}
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
return(qc.table)
}
qc <- qcGenes(cm)
qcGenes <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
coords <- GetCoords(colnames(object), delim)
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
} else {
coords <- GetCoords(colnames(object), delim)
exprMat <- object
}
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
return(qc.table)
}
colnames(cm)
colnames(cm) <- gsub(pattern = "_", replacement = "x", x = colnames(cm))
qc <- qcGenes(cm, delim = "x|_")
object <- cm
coords <- GetCoords(colnames(object), delim)
delim = "x"
coords <- GetCoords(colnames(object), delim)
head(coords)
?strsplit
coords <- GetCoords(colnames(object), delim = "x|_")
coords
qcGenes <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
coords <- GetCoords(colnames(object), delim)
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
} else {
coords <- GetCoords(colnames(object), delim)
exprMat <- object
}
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
return(qc.table)
}
coords <- GetCoords(colnames(object), delim)
delim = "x|_"
coords <- GetCoords(colnames(object), delim)
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
dim(exprMat)
exprMat[1:5, 1:5]
qc.table <- data.frame(gene = rownames(object))
colnames(coords)
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
dim(exprMat)
i = 1
coords$sampleID == samples[i]
dim(exprMat[, coords$sampleID == samples[i]])
head(exprMat[, coords$sampleID == samples[i]])
dim(exprMat)
sum(coords$sampleID == samples[i])
coords$sampleID
GetCoords <- function(spotnames, delim = "x") {
stopifnot(class(spotnames) == "character")
if (sum(duplicated(spotnames)) > 0) {
stop("Duplicate names are not allowed ...")
}
coords <- do.call(rbind, strsplit(spotnames, split = delim))
if (ncol(coords) == 3) {
coords <- setNames(data.frame(coords, stringsAsFactors = F), nm = c("x", "y", "sampleID"))
} else if (ncol(coords) == 2) {
coords <- setNames(data.frame(coords, stringsAsFactors = F), nm = c("x", "y"))
} else {
stop("Invalid spotnames ...")
}
coords$x <- as.numeric(coords$x)
coords$y <- as.numeric(coords$y)
rownames(coords) <- spotnames
return(coords)
}
coords <- GetCoords(colnames(object), delim)
head(coords)
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
samples <- unique(coords$sampleID)
samples
dim(exprMat[, coords$sampleID == samples[i]])
head(rowSums(exprMat[, coords$sampleID == samples[i]]))
class(exprMat[, coords$sampleID == samples[i]])
library(Matrix)
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
samples[i]
head(rowSums(exprMat[, coords$sampleID == samples[i]]))
labels
samples[i]
labels = NULL
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
qcGenes <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
coords <- GetCoords(colnames(object), delim)
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
} else {
coords <- GetCoords(colnames(object), delim)
exprMat <- object
}
qc.table <- data.frame(gene = rownames(object))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
} else {
qc.table[, "count"] <- rowSums(exprMat)
}
return(qc.table)
}
qc <- qcGenes(cm)
qc <- qcGenes(cm, delim = "x|_")
head(qc)
qcSamples <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
} else {
exprMat <- object
}
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- function(grouped_df) {
grouped_df %>% summarize(avg.nTranscripts = round(mean(nTranscripts), digits = 2),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = round(mean(nGenes), digits = 2),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>% as.data.frame()
}
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
qc <- qcSamples(cm)
qcSpots <- function(
exprMat,
delim = "x"
) {
qc.table <- GetCoords(colnames(exprMat), delim)
qc.table <- cbind(qc.table, data.frame(nCount_RNA = colSums(exprMat),
nFeature_RNA = apply(exprMat, 2, function(x) sum(x > 0))))
qc.table$nCount_per_nFeature_RNA <- qc.table$nCount_RNA/qc.table$nFeature_RNA
return(qc.table)
}
qc <- qcSamples(cm)
library(magrittr)
library(dplyr)
qc <- qcSamples(cm)
qcSamples <- function(
object,
delim = "x",
labels = NULL
) {
stopifnot(class(object) %in% c("matrix", "data.frame", "Seurat"))
if (class(object) == "Seurat") {
exprMat <- GetAssayData(object = object, slot = 'counts')
exprMat <- exprMat[rownames(object), colnames(object)]
} else {
exprMat <- object
}
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- function(grouped_df) {
grouped_df %>% summarize(avg.nCount_RNA = round(mean(nCount_RNA), digits = 2),
max.nCount_RNA = max(nCount_RNA),
min.nCount_RNA = min(nCount_RNA),
avg.nFeature_RNA = round(mean(nFeature_RNA), digits = 2),
max.nFeature_RNA = max(nFeature_RNA),
min.nFeature_RNA = min(nFeature_RNA)) %>% as.data.frame()
}
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
qc <- qcSamples(cm)
qc <- qcSamples(cm,d elim = "x|_")
qc <- qcSamples(cm, delim = "x|_")
qc
devtools::document()
library(STutility)
sessionInfo(fo())
sessionInfo()
