expr.merger <- function(exp.list, delim = "_", labels = NULL) {
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# collect all unique genes
genes <- unique(unlist(lapply(exp.list, rownames)))
# Obtain
cols <- unlist(lapply(exp.list, colnames))
merged_exprMat <- do.call(cbind, lapply(seq_along(exp.list), function(i) {
exprMat <- exp.list[[i]]
A <- as.data.frame(exprMat)
A <- A[genes, ]
rownames(A) <- genes
A[is.na(A)] <- 0
colnames(A) <- paste(ifelse(is.null(labels), i, labels[i]), colnames(A), sep = delim)
as(as.matrix(A), "dgCMatrix")
}))
return(merged_exprMat)
}
expr.merger <- function(
exp.list,
delim = "x",
labels = NULL,
sparse.matrix.fmt = F
) {
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# List all genes
genes <- Reduce(union, lapply(exp.list, rownames))
matrix.list <- lapply(seq_along(exp.list), function(i) {
count <- exp.list[[i]]
nspots <- ncol(count)
curgenes <- rownames(count)
m <- matrix(0, nrow=length(genes), ncol=nspots)
rownames(m) <- genes
m[curgenes,] <- count
colnames(m) <- paste(ifelse(!is.null(labels), labels[i], i), colnames(count), sep = delim)
# Save in sparse format?
if (sparse.matrix.fmt) {
m <- as(m, "dgCMatrix")
}
return(m)
})
return(do.call(rbind, matrix.list))
}
tsv.files <- c("~/ribosomal_depletion/181217_MOB/181218_C1_S1_ribosomal_depletion_LK_stdata.tsv",
"~/ribosomal_depletion/181217_MOB/181218_C2_S2_ribosomal_depletion_LK_stdata.tsv")
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
x = c()
tmp = suppressWarnings({try({x = data.frame(fread(input = path, integer64 = "character",
sep = delim),
row.names = row.names,
check.names = FALSE)})})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
exp.list <- lapply(tsv.files, function(x) {
t(st.load.matrix.2(x))
})
library(data.table)
exp.list <- lapply(tsv.files, function(x) {
t(st.load.matrix.2(x))
})
lapply(exp.list, dim)
labels = NULL
delim = "x"
sparse.matrix.fmt = F
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# List all genes
genes <- Reduce(union, lapply(exp.list, rownames))
length(genes)
i <- 1
count <- exp.list[[i]]
nspots <- ncol(count)
curgenes <- rownames(count)
m <- matrix(0, nrow=length(genes), ncol=nspots)
rownames(m) <- genes
m[curgenes,] <- count
colnames(m) <- paste(ifelse(!is.null(labels), labels[i], i), colnames(count), sep = delim)
dim(m)
m[1:5, 1:5]
matrix.list <- lapply(seq_along(exp.list), function(i) {
count <- exp.list[[i]]
nspots <- ncol(count)
curgenes <- rownames(count)
m <- matrix(0, nrow=length(genes), ncol=nspots)
rownames(m) <- genes
m[curgenes,] <- count
colnames(m) <- paste(ifelse(!is.null(labels), labels[i], i), colnames(count), sep = delim)
# Save in sparse format?
if (sparse.matrix.fmt) {
m <- as(m, "dgCMatrix")
}
return(m)
})
lapply(matrix.list, dim)
merged_df <- do.call(rbind, matrix.list)
expr.merger <- function(
exp.list,
delim = "x",
labels = NULL,
sparse.matrix.fmt = F
) {
# Check labels
if (!is.null(labels)) {
stopifnot(length(labels) == length(ls) & class(labels) == "character")
}
# List all genes
genes <- Reduce(union, lapply(exp.list, rownames))
matrix.list <- lapply(seq_along(exp.list), function(i) {
count <- exp.list[[i]]
nspots <- ncol(count)
curgenes <- rownames(count)
m <- matrix(0, nrow=length(genes), ncol=nspots)
rownames(m) <- genes
m[curgenes,] <- count
colnames(m) <- paste(ifelse(!is.null(labels), labels[i], i), colnames(count), sep = delim)
# Save in sparse format?
if (sparse.matrix.fmt) {
m <- as(m, "dgCMatrix")
}
return(m)
})
return(do.call(cbind, matrix.list))
}
tsv.files <- c("~/ribosomal_depletion/181217_MOB/181218_C1_S1_ribosomal_depletion_LK_stdata.tsv",
"~/ribosomal_depletion/181217_MOB/181218_C2_S2_ribosomal_depletion_LK_stdata.tsv")
merged_df <- expr.merger(exp.list, delim = "x")
merged_df[1:5, 1:5]
dim(merged_df)
merged_df <- expr.merger(exp.list, delim = "x", sparse.matrix.fmt = T)
library(Matrix)
merged_df <- expr.merger(exp.list, delim = "x", sparse.matrix.fmt = T)
dim(merged_df)
merged_df[1:5, 1:5]
st.load.matrix.2 = function(path, delim="\t", row.names=1, ...) {
stopifnot(file.exists(path))
x = c()
tmp = suppressWarnings({try({x = data.frame(fread(input = path, integer64 = "character",
sep = delim),
row.names = row.names,
check.names = FALSE)})})
if(inherits(tmp, 'try-error')) {
return(as.matrix(c()))
} else {
return(as.matrix(x))
}
}
exp.list <- lapply(tsv.files, function(x) {
t(st.load.matrix.2(x))
})
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
exprMat <- exp.list[[1]]
exprMat[1:5, 1:5]
qcSpots <- function(exprMat, delim = "x") {
qc.table <- GetCoords(colnames(exprMat), delim)
qc.table <- cbind(qc.table, data.frame(nTranscripts = colSums(exprMat), nGenes = apply(exprMat, 2, function(x) sum(x > 0))))
}
qc <- qcSpots(exprMat = )
qc <- qcSpots(exprMat)
head(qc)
?eval
qcSpots <- function(exprMat, delim = "x") {
qc.table <- GetCoords(colnames(exprMat), delim)
qc.table <- cbind(qc.table, data.frame(nTranscripts = colSums(exprMat),
nGenes = apply(exprMat, 2, function(x) sum(x > 0))))
qc.table$nTranscripts_per_gene <- qc.table$nTranscripts/qc.table$nGenes
return(qc.table)
}
qc <- qcSpots(exprMat)
head(qc)
hist(qc$nTranscripts_per_gene)
hist(qc$nTranscripts_per_gene, breaks = 100)
colnames(exprMat) <- paste(1, colnames(exprMat), sep = "x")
qc.table <- GetCoords(colnames(exprMat), delim)
head(qc.table)
qcGenes <- function(exprMat, delim = "x") {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (s in samples) {
qc.table[, paste("count_", s)] <- rowSums(exprMat[, coords$sampleID == s])
}
}
return(qc.table)
}
qc.genes <- qcGenes(exprMat = exprMat)
head(qc.genes)
qcGenes <- function(exprMat, delim = "x") {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (s in samples) {
qc.table[, paste0("count_", s)] <- rowSums(exprMat[, coords$sampleID == s])
}
}
return(qc.table)
}
head(qc.genes)
qc.genes <- qcGenes(exprMat = exprMat)
head(qc.genes)
qcGenes <- function(exprMat, delim = "x") {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (s in samples) {
qc.table[, paste0("sample:", s)] <- rowSums(exprMat[, coords$sampleID == s])
}
}
return(qc.table)
}
qc.genes <- qcGenes(exprMat = exprMat)
head(qc.genes)
qc.genes <- qcGenes(exprMat = merged_df)
head(qc.genes)
qcGenes <- function(exprMat, delim = "x") {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (s in samples) {
qc.table[, paste0("S", s)] <- rowSums(exprMat[, coords$sampleID == s])
}
}
return(qc.table)
}
qc.genes <- qcGenes(exprMat = merged_df)
head(qc.genes)
qcGenes <- function(exprMat, delim = "x") {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (s in samples) {
qc.table[, paste0("sample", s)] <- rowSums(exprMat[, coords$sampleID == s])
}
}
return(qc.table)
}
head(qc.genes)
qc.genes <- qcGenes(exprMat = merged_df)
head(qc.genes)
qcGenes <- function(exprMat, delim = "x", labels = NULL) {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], paste0("sample", samples[i]))] <- rowSums(exprMat[, coords$sampleID == s])
}
}
return(qc.table)
}
qc.genes <- qcGenes(exprMat = merged_df)
qcGenes <- function(exprMat, delim = "x", labels = NULL) {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], paste0("sample", samples[i]))] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
}
return(qc.table)
}
qc.genes <- qcGenes(exprMat = merged_df)
head(qc.genes)
qcGenes <- function(exprMat, delim = "x", labels = NULL) {
coords <- GetCoords(colnames(exprMat), delim)
qc.table <- data.frame(gene = rownames(exprMat))
if ("sampleID" %in% colnames(coords)) {
samples <- unique(coords$sampleID)
for (i in seq_along(samples)) {
qc.table[, ifelse(!is.null(labels), labels[i], samples[i])] <- rowSums(exprMat[, coords$sampleID == samples[i]])
}
}
return(qc.table)
}
qc.genes <- qcGenes(exprMat = merged_df)
head(qc.genes)
qc.genes <- qcGenes(exprMat = merged_df, labels = c("Exp1", "Exp2"))
head(qc.genes)
library(dplyr)
library(magrittr)
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
if ("sampleID" %in% colnames(coords)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes))
} else {
qc.table <- qc.table %>%
summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes))
}
return(qc.table)
}
qc <- qcSamples(merged_df)
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes))
} else {
qc.table <- qc.table %>%
summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes))
}
return(qc.table)
}
qc <- qcSamples(merged_df)
head(qc)
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>%
as.data.frame()
} else {
qc.table <- qc.table %>%
summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>%
as.data.frame()
}
return(qc.table)
}
head(qc)
qc <- qcSamples(merged_df)
head(qc)
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>%
as.data.frame()
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
qc <- qcSamples(merged_df)
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- function(grouped_df) {
grouped_df %>% summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>%
as.data.frame()
})
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- function(grouped_df) {
grouped_df %>% summarize(avg.nTranscripts = mean(nTranscripts),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>%
as.data.frame()
}
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
qc <- qcSamples(merged_df)
head(qc)
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- function(grouped_df) {
grouped_df %>% summarize(avg.nTranscripts = mean(nTranscripts), max.nTranscripts = max(nTranscripts), min.nTranscripts = min(nTranscripts),
avg.nGenes = mean(nGenes), max.nGenes = max(nGenes), min.nGenes = min(nGenes)) %>% as.data.frame()
}
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
qc <- qcSamples(merged_df)
head(qc)
qc
qcSamples <- function(
exprMat,
delim = "x",
labels = NULL
) {
qc.table <- qcSpots(exprMat, delim)
summarize_fkn <- function(grouped_df) {
grouped_df %>% summarize(avg.nTranscripts = round(mean(nTranscripts), digits = 2),
max.nTranscripts = max(nTranscripts),
min.nTranscripts = min(nTranscripts),
avg.nGenes = round(mean(nGenes), digits = 2),
max.nGenes = max(nGenes),
min.nGenes = min(nGenes)) %>% as.data.frame()
}
if ("sampleID" %in% colnames(qc.table)) {
qc.table <- qc.table %>%
group_by(sampleID) %>%
summarize_fkn
} else {
qc.table <- qc.table %>%
summarize_fkn
}
return(qc.table)
}
devtools::document()
